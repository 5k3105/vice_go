// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Fri, 23 Jun 2017 22:04:27 MDT.
// By https://git.io/cgogen. DO NOT EDIT.

package vice

/*
#include "monitor.h"
#include "maincpu.h"
#include "mem.h"
#include "video.h"
#include "init.h"
#include "diskimage.h"
#include "debug.h"
#include "monitor/mon_breakpoint.h"
#include "c64/c64mem.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import "unsafe"

// MonitorFindCpuTypeFromString function as declared in vice\monitor.h:139
func MonitorFindCpuTypeFromString(cpuType string) *MonitorCpuType {
	ccpuType, _ := unpackPCharString(cpuType)
	__ret := C.monitor_find_cpu_type_from_string(ccpuType)
	__v := NewMonitorCpuTypeRef(unsafe.Pointer(__ret))
	return __v
}

// MonitorInit function as declared in vice\monitor.h:141
func MonitorInit(maincpuInterface []MonitorInterface, driveInterfaceInit [][]MonitorInterface, asmarray [][]MonitorCpuTypeS) {
	cmaincpuInterface, _ := unpackArgSMonitorInterface(maincpuInterface)
	cdriveInterfaceInit, _ := unpackArgSSMonitorInterface(driveInterfaceInit)
	casmarray, _ := unpackArgSSMonitorCpuTypeS(asmarray)
	C.monitor_init(cmaincpuInterface, cdriveInterfaceInit, casmarray)
	packSSMonitorCpuTypeS(asmarray, casmarray)
	packSSMonitorInterface(driveInterfaceInit, cdriveInterfaceInit)
	packSMonitorInterface(maincpuInterface, cmaincpuInterface)
}

// MonitorShutdown function as declared in vice\monitor.h:144
func MonitorShutdown() {
	C.monitor_shutdown()
}

// MonitorCmdlineOptionsInit function as declared in vice\monitor.h:145
func MonitorCmdlineOptionsInit() int32 {
	__ret := C.monitor_cmdline_options_init()
	__v := (int32)(__ret)
	return __v
}

// MonitorResourcesInit function as declared in vice\monitor.h:146
func MonitorResourcesInit() int32 {
	__ret := C.monitor_resources_init()
	__v := (int32)(__ret)
	return __v
}

// MonitorStartup function as declared in vice\monitor.h:147
func MonitorStartup(mem Memspace) {
	cmem, _ := (C.MEMSPACE)(mem), cgoAllocsUnknown
	C.monitor_startup(cmem)
}

// MonitorStartupTrap function as declared in vice\monitor.h:148
func MonitorStartupTrap() {
	C.monitor_startup_trap()
}

// MonitorAbort function as declared in vice\monitor.h:150
func MonitorAbort() {
	C.monitor_abort()
}

// MonitorForceImport function as declared in vice\monitor.h:152
func MonitorForceImport(mem Memspace) int32 {
	cmem, _ := (C.MEMSPACE)(mem), cgoAllocsUnknown
	__ret := C.monitor_force_import(cmem)
	__v := (int32)(__ret)
	return __v
}

// MonitorCheckIcount function as declared in vice\monitor.h:153
func MonitorCheckIcount(a uint16) {
	ca, _ := (C.WORD)(a), cgoAllocsUnknown
	C.monitor_check_icount(ca)
}

// MonitorCheckIcountInterrupt function as declared in vice\monitor.h:154
func MonitorCheckIcountInterrupt() {
	C.monitor_check_icount_interrupt()
}

// MonitorCheckWatchpoints function as declared in vice\monitor.h:155
func MonitorCheckWatchpoints(lastpc uint32, pc uint32) {
	clastpc, _ := (C.uint)(lastpc), cgoAllocsUnknown
	cpc, _ := (C.uint)(pc), cgoAllocsUnknown
	C.monitor_check_watchpoints(clastpc, cpc)
}

// MonitorCpuTypeSet function as declared in vice\monitor.h:157
func MonitorCpuTypeSet(cpuType string) {
	ccpuType, _ := unpackPCharString(cpuType)
	C.monitor_cpu_type_set(ccpuType)
}

// MonitorWatchPushLoadAddr function as declared in vice\monitor.h:159
func MonitorWatchPushLoadAddr(addr uint16, mem Memspace) {
	caddr, _ := (C.WORD)(addr), cgoAllocsUnknown
	cmem, _ := (C.MEMSPACE)(mem), cgoAllocsUnknown
	C.monitor_watch_push_load_addr(caddr, cmem)
}

// MonitorWatchPushStoreAddr function as declared in vice\monitor.h:160
func MonitorWatchPushStoreAddr(addr uint16, mem Memspace) {
	caddr, _ := (C.WORD)(addr), cgoAllocsUnknown
	cmem, _ := (C.MEMSPACE)(mem), cgoAllocsUnknown
	C.monitor_watch_push_store_addr(caddr, cmem)
}

// MonitorInterfaceNew function as declared in vice\monitor.h:162
func MonitorInterfaceNew() *MonitorInterface {
	__ret := C.monitor_interface_new()
	__v := NewMonitorInterfaceRef(unsafe.Pointer(__ret))
	return __v
}

// MonitorInterfaceDestroy function as declared in vice\monitor.h:163
func MonitorInterfaceDestroy(monitorInterface []MonitorInterface) {
	cmonitorInterface, _ := unpackArgSMonitorInterface(monitorInterface)
	C.monitor_interface_destroy(cmonitorInterface)
	packSMonitorInterface(monitorInterface, cmonitorInterface)
}

// MonitorDiskspaceDnr function as declared in vice\monitor.h:165
func MonitorDiskspaceDnr(mem int32) int32 {
	cmem, _ := (C.int)(mem), cgoAllocsUnknown
	__ret := C.monitor_diskspace_dnr(cmem)
	__v := (int32)(__ret)
	return __v
}

// MonitorDiskspaceMem function as declared in vice\monitor.h:166
func MonitorDiskspaceMem(dnr int32) int32 {
	cdnr, _ := (C.int)(dnr), cgoAllocsUnknown
	__ret := C.monitor_diskspace_mem(cdnr)
	__v := (int32)(__ret)
	return __v
}

// MonitorCheckBreakpoints function as declared in vice\monitor.h:178
func MonitorCheckBreakpoints(mem Memspace, addr uint16) int32 {
	cmem, _ := (C.MEMSPACE)(mem), cgoAllocsUnknown
	caddr, _ := (C.WORD)(addr), cgoAllocsUnknown
	__ret := C.monitor_check_breakpoints(cmem, caddr)
	__v := (int32)(__ret)
	return __v
}

// MonitorCpuhistoryStore function as declared in vice\monitor.h:212
func MonitorCpuhistoryStore(addr uint32, op uint32, p1 uint32, p2 uint32, regA byte, regX byte, regY byte, regSp byte, regSt uint32) {
	caddr, _ := (C.uint)(addr), cgoAllocsUnknown
	cop, _ := (C.uint)(op), cgoAllocsUnknown
	cp1, _ := (C.uint)(p1), cgoAllocsUnknown
	cp2, _ := (C.uint)(p2), cgoAllocsUnknown
	cregA, _ := (C.uchar)(regA), cgoAllocsUnknown
	cregX, _ := (C.uchar)(regX), cgoAllocsUnknown
	cregY, _ := (C.uchar)(regY), cgoAllocsUnknown
	cregSp, _ := (C.uchar)(regSp), cgoAllocsUnknown
	cregSt, _ := (C.uint)(regSt), cgoAllocsUnknown
	C.monitor_cpuhistory_store(caddr, cop, cp1, cp2, cregA, cregX, cregY, cregSp, cregSt)
}

// MonitorCpuhistoryFixP2 function as declared in vice\monitor.h:215
func MonitorCpuhistoryFixP2(p2 uint32) {
	cp2, _ := (C.uint)(p2), cgoAllocsUnknown
	C.monitor_cpuhistory_fix_p2(cp2)
}

// MonitorMemmapStore function as declared in vice\monitor.h:216
func MonitorMemmapStore(addr uint32, kind uint32) {
	caddr, _ := (C.uint)(addr), cgoAllocsUnknown
	ckind, _ := (C.uint)(kind), cgoAllocsUnknown
	C.monitor_memmap_store(caddr, ckind)
}

var MaincpuRegs Mos6510RegsS

var MaincpuAlarmContext []AlarmContextS
var MaincpuClkGuard []ClkGuardS
var MaincpuMonitorInterface []MonitorInterfaceS

// MaincpuResyncLimits function as declared in vice\maincpu.h:85
func MaincpuResyncLimits() {
	C.maincpu_resync_limits()
}

// MaincpuInit function as declared in vice\maincpu.h:86
func MaincpuInit() {
	C.maincpu_init()
}

// MaincpuEarlyInit function as declared in vice\maincpu.h:87
func MaincpuEarlyInit() {
	C.maincpu_early_init()
}

// MaincpuShutdown function as declared in vice\maincpu.h:88
func MaincpuShutdown() {
	C.maincpu_shutdown()
}

// MaincpuReset function as declared in vice\maincpu.h:89
func MaincpuReset() {
	C.maincpu_reset()
}

// MaincpuMainloop function as declared in vice\maincpu.h:90
func MaincpuMainloop() {
	C.maincpu_mainloop()
}

// MaincpuMonitorInterfaceGet function as declared in vice\maincpu.h:91
func MaincpuMonitorInterfaceGet() *MonitorInterfaceS {
	__ret := C.maincpu_monitor_interface_get()
	__v := NewMonitorInterfaceSRef(unsafe.Pointer(__ret))
	return __v
}

// MaincpuSnapshotReadModule function as declared in vice\maincpu.h:92
func MaincpuSnapshotReadModule(s []SnapshotS) int32 {
	cs, _ := (*C.struct_snapshot_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&s)).Data)), cgoAllocsUnknown
	__ret := C.maincpu_snapshot_read_module(cs)
	__v := (int32)(__ret)
	return __v
}

// MaincpuSnapshotWriteModule function as declared in vice\maincpu.h:93
func MaincpuSnapshotWriteModule(s []SnapshotS) int32 {
	cs, _ := (*C.struct_snapshot_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&s)).Data)), cgoAllocsUnknown
	__ret := C.maincpu_snapshot_write_module(cs)
	__v := (int32)(__ret)
	return __v
}

// MaincpuSetPc function as declared in vice\maincpu.h:95
func MaincpuSetPc(arg0 int32) {
	carg0, _ := (C.int)(arg0), cgoAllocsUnknown
	C.maincpu_set_pc(carg0)
}

// MaincpuSetA function as declared in vice\maincpu.h:96
func MaincpuSetA(arg0 int32) {
	carg0, _ := (C.int)(arg0), cgoAllocsUnknown
	C.maincpu_set_a(carg0)
}

// MaincpuSetX function as declared in vice\maincpu.h:97
func MaincpuSetX(arg0 int32) {
	carg0, _ := (C.int)(arg0), cgoAllocsUnknown
	C.maincpu_set_x(carg0)
}

// MaincpuSetY function as declared in vice\maincpu.h:98
func MaincpuSetY(arg0 int32) {
	carg0, _ := (C.int)(arg0), cgoAllocsUnknown
	C.maincpu_set_y(carg0)
}

// MaincpuSetSign function as declared in vice\maincpu.h:99
func MaincpuSetSign(arg0 int32) {
	carg0, _ := (C.int)(arg0), cgoAllocsUnknown
	C.maincpu_set_sign(carg0)
}

// MaincpuSetZero function as declared in vice\maincpu.h:100
func MaincpuSetZero(arg0 int32) {
	carg0, _ := (C.int)(arg0), cgoAllocsUnknown
	C.maincpu_set_zero(carg0)
}

// MaincpuSetCarry function as declared in vice\maincpu.h:101
func MaincpuSetCarry(arg0 int32) {
	carg0, _ := (C.int)(arg0), cgoAllocsUnknown
	C.maincpu_set_carry(carg0)
}

// MaincpuSetInterrupt function as declared in vice\maincpu.h:102
func MaincpuSetInterrupt(arg0 int32) {
	carg0, _ := (C.int)(arg0), cgoAllocsUnknown
	C.maincpu_set_interrupt(carg0)
}

// MaincpuGetPc function as declared in vice\maincpu.h:103
func MaincpuGetPc() uint32 {
	__ret := C.maincpu_get_pc()
	__v := (uint32)(__ret)
	return __v
}

// MaincpuGetA function as declared in vice\maincpu.h:104
func MaincpuGetA() uint32 {
	__ret := C.maincpu_get_a()
	__v := (uint32)(__ret)
	return __v
}

// MaincpuGetX function as declared in vice\maincpu.h:105
func MaincpuGetX() uint32 {
	__ret := C.maincpu_get_x()
	__v := (uint32)(__ret)
	return __v
}

// MaincpuGetY function as declared in vice\maincpu.h:106
func MaincpuGetY() uint32 {
	__ret := C.maincpu_get_y()
	__v := (uint32)(__ret)
	return __v
}

// MaincpuGetSp function as declared in vice\maincpu.h:107
func MaincpuGetSp() uint32 {
	__ret := C.maincpu_get_sp()
	__v := (uint32)(__ret)
	return __v
}

// MemInitializeMemory function as declared in vice\mem.h:51
func MemInitializeMemory() {
	C.mem_initialize_memory()
}

// MemPowerup function as declared in vice\mem.h:52
func MemPowerup() {
	C.mem_powerup()
}

// MemLoad function as declared in vice\mem.h:53
func MemLoad() int32 {
	__ret := C.mem_load()
	__v := (int32)(__ret)
	return __v
}

// MemGetBasicText function as declared in vice\mem.h:54
func MemGetBasicText(start []uint16, end []uint16) {
	cstart, _ := (*C.WORD)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&start)).Data)), cgoAllocsUnknown
	cend, _ := (*C.WORD)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&end)).Data)), cgoAllocsUnknown
	C.mem_get_basic_text(cstart, cend)
}

// MemSetBasicText function as declared in vice\mem.h:55
func MemSetBasicText(start uint16, end uint16) {
	cstart, _ := (C.WORD)(start), cgoAllocsUnknown
	cend, _ := (C.WORD)(end), cgoAllocsUnknown
	C.mem_set_basic_text(cstart, cend)
}

// MemToggleWatchpoints function as declared in vice\mem.h:56
func MemToggleWatchpoints(flag int32, context unsafe.Pointer) {
	cflag, _ := (C.int)(flag), cgoAllocsUnknown
	ccontext, _ := (unsafe.Pointer)(unsafe.Pointer(context)), cgoAllocsUnknown
	C.mem_toggle_watchpoints(cflag, ccontext)
}

// MemRomTrapAllowed function as declared in vice\mem.h:57
func MemRomTrapAllowed(addr uint16) int32 {
	caddr, _ := (C.WORD)(addr), cgoAllocsUnknown
	__ret := C.mem_rom_trap_allowed(caddr)
	__v := (int32)(__ret)
	return __v
}

// MemMmuTranslate function as declared in vice\mem.h:58
func MemMmuTranslate(addr uint32, base [][]byte, start []int32, limit []int32) {
	caddr, _ := (C.uint)(addr), cgoAllocsUnknown
	cbase, _ := unpackArgSSByte(base)
	cstart, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&start)).Data)), cgoAllocsUnknown
	climit, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&limit)).Data)), cgoAllocsUnknown
	C.mem_mmu_translate(caddr, cbase, cstart, climit)
	packSSByte(base, cbase)
}

// MemColorRamToSnapshot function as declared in vice\mem.h:59
func MemColorRamToSnapshot(colorRam []byte) {
	ccolorRam, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&colorRam)).Data)), cgoAllocsUnknown
	C.mem_color_ram_to_snapshot(ccolorRam)
}

// MemColorRamFromSnapshot function as declared in vice\mem.h:60
func MemColorRamFromSnapshot(colorRam []byte) {
	ccolorRam, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&colorRam)).Data)), cgoAllocsUnknown
	C.mem_color_ram_from_snapshot(ccolorRam)
}

// MemInject function as declared in vice\mem.h:67
func MemInject(addr uint32, value byte) {
	caddr, _ := (C.DWORD)(addr), cgoAllocsUnknown
	cvalue, _ := (C.uchar)(value), cgoAllocsUnknown
	C.mem_inject(caddr, cvalue)
}

// MemBankList function as declared in vice\mem.h:78
func MemBankList() *string {
	__ret := C.mem_bank_list()
	__v := NewRef(unsafe.Pointer(__ret))
	return __v
}

// MemBankFromName function as declared in vice\mem.h:79
func MemBankFromName(name string) int32 {
	cname, _ := unpackPCharString(name)
	__ret := C.mem_bank_from_name(cname)
	__v := (int32)(__ret)
	return __v
}

// MemBankRead function as declared in vice\mem.h:80
func MemBankRead(bank int32, addr uint16, context unsafe.Pointer) byte {
	cbank, _ := (C.int)(bank), cgoAllocsUnknown
	caddr, _ := (C.WORD)(addr), cgoAllocsUnknown
	ccontext, _ := (unsafe.Pointer)(unsafe.Pointer(context)), cgoAllocsUnknown
	__ret := C.mem_bank_read(cbank, caddr, ccontext)
	__v := (byte)(__ret)
	return __v
}

// MemBankPeek function as declared in vice\mem.h:81
func MemBankPeek(bank int32, addr uint16, context unsafe.Pointer) byte {
	cbank, _ := (C.int)(bank), cgoAllocsUnknown
	caddr, _ := (C.WORD)(addr), cgoAllocsUnknown
	ccontext, _ := (unsafe.Pointer)(unsafe.Pointer(context)), cgoAllocsUnknown
	__ret := C.mem_bank_peek(cbank, caddr, ccontext)
	__v := (byte)(__ret)
	return __v
}

// MemBankWrite function as declared in vice\mem.h:82
func MemBankWrite(bank int32, addr uint16, byte byte, context unsafe.Pointer) {
	cbank, _ := (C.int)(bank), cgoAllocsUnknown
	caddr, _ := (C.WORD)(addr), cgoAllocsUnknown
	cbyte, _ := (C.uchar)(byte), cgoAllocsUnknown
	ccontext, _ := (unsafe.Pointer)(unsafe.Pointer(context)), cgoAllocsUnknown
	C.mem_bank_write(cbank, caddr, cbyte, ccontext)
}

// MemGetScreenParameter function as declared in vice\mem.h:83
func MemGetScreenParameter(base []uint16, rows []byte, columns []byte, bank []int32) {
	cbase, _ := (*C.WORD)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&base)).Data)), cgoAllocsUnknown
	crows, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rows)).Data)), cgoAllocsUnknown
	ccolumns, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&columns)).Data)), cgoAllocsUnknown
	cbank, _ := (*C.int)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&bank)).Data)), cgoAllocsUnknown
	C.mem_get_screen_parameter(cbase, crows, ccolumns, cbank)
}

// MemIoregListGet function as declared in vice\mem.h:94
func MemIoregListGet(context unsafe.Pointer) *MemIoregList {
	ccontext, _ := (unsafe.Pointer)(unsafe.Pointer(context)), cgoAllocsUnknown
	__ret := C.mem_ioreg_list_get(ccontext)
	__v := NewMemIoregListRef(unsafe.Pointer(__ret))
	return __v
}

// MemWriteSnapshotModule function as declared in vice\mem.h:98
func MemWriteSnapshotModule(s []SnapshotS, saveRoms int32) int32 {
	cs, _ := (*C.struct_snapshot_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&s)).Data)), cgoAllocsUnknown
	csaveRoms, _ := (C.int)(saveRoms), cgoAllocsUnknown
	__ret := C.mem_write_snapshot_module(cs, csaveRoms)
	__v := (int32)(__ret)
	return __v
}

// VideoRenderInitconfig function as declared in vice\video.h:207
func VideoRenderInitconfig(config []VideoRenderConfig) {
	cconfig, _ := unpackArgSVideoRenderConfig(config)
	C.video_render_initconfig(cconfig)
	packSVideoRenderConfig(config, cconfig)
}

// VideoRenderSetphysicalcolor function as declared in vice\video.h:208
func VideoRenderSetphysicalcolor(config []VideoRenderConfig, index int32, color uint32, depth int32) {
	cconfig, _ := unpackArgSVideoRenderConfig(config)
	cindex, _ := (C.int)(index), cgoAllocsUnknown
	ccolor, _ := (C.DWORD)(color), cgoAllocsUnknown
	cdepth, _ := (C.int)(depth), cgoAllocsUnknown
	C.video_render_setphysicalcolor(cconfig, cindex, ccolor, cdepth)
	packSVideoRenderConfig(config, cconfig)
}

// VideoRenderSetrawrgb function as declared in vice\video.h:210
func VideoRenderSetrawrgb(index uint32, r uint32, g uint32, b uint32) {
	cindex, _ := (C.uint)(index), cgoAllocsUnknown
	cr, _ := (C.DWORD)(r), cgoAllocsUnknown
	cg, _ := (C.DWORD)(g), cgoAllocsUnknown
	cb, _ := (C.DWORD)(b), cgoAllocsUnknown
	C.video_render_setrawrgb(cindex, cr, cg, cb)
}

// VideoRenderInitraw function as declared in vice\video.h:212
func VideoRenderInitraw(videoconfig []VideoRenderConfigS) {
	cvideoconfig, _ := unpackArgSVideoRenderConfigS(videoconfig)
	C.video_render_initraw(cvideoconfig)
	packSVideoRenderConfigS(videoconfig, cvideoconfig)
}

// VideoArchCmdlineOptionsInit function as declared in vice\video.h:216
func VideoArchCmdlineOptionsInit() int32 {
	__ret := C.video_arch_cmdline_options_init()
	__v := (int32)(__ret)
	return __v
}

// VideoCmdlineOptionsInit function as declared in vice\video.h:217
func VideoCmdlineOptionsInit() int32 {
	__ret := C.video_cmdline_options_init()
	__v := (int32)(__ret)
	return __v
}

// VideoInit function as declared in vice\video.h:218
func VideoInit() int32 {
	__ret := C.video_init()
	__v := (int32)(__ret)
	return __v
}

// VideoShutdown function as declared in vice\video.h:219
func VideoShutdown() {
	C.video_shutdown()
}

// VideoCanvasCreate function as declared in vice\video.h:221
func VideoCanvasCreate(canvas []VideoCanvasS, width []uint32, height []uint32, mapped int32) *VideoCanvasS {
	ccanvas, _ := (*C.struct_video_canvas_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&canvas)).Data)), cgoAllocsUnknown
	cwidth, _ := (*C.uint)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&width)).Data)), cgoAllocsUnknown
	cheight, _ := (*C.uint)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&height)).Data)), cgoAllocsUnknown
	cmapped, _ := (C.int)(mapped), cgoAllocsUnknown
	__ret := C.video_canvas_create(ccanvas, cwidth, cheight, cmapped)
	__v := *(**VideoCanvasS)(unsafe.Pointer(&__ret))
	return __v
}

// VideoArchCanvasInit function as declared in vice\video.h:224
func VideoArchCanvasInit(canvas []VideoCanvasS) {
	ccanvas, _ := (*C.struct_video_canvas_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&canvas)).Data)), cgoAllocsUnknown
	C.video_arch_canvas_init(ccanvas)
}

// VideoCanvasShutdown function as declared in vice\video.h:225
func VideoCanvasShutdown(canvas []VideoCanvasS) {
	ccanvas, _ := (*C.struct_video_canvas_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&canvas)).Data)), cgoAllocsUnknown
	C.video_canvas_shutdown(ccanvas)
}

// VideoCanvasInit function as declared in vice\video.h:226
func VideoCanvasInit() *VideoCanvasS {
	__ret := C.video_canvas_init()
	__v := *(**VideoCanvasS)(unsafe.Pointer(&__ret))
	return __v
}

// VideoCanvasRefresh function as declared in vice\video.h:227
func VideoCanvasRefresh(canvas []VideoCanvasS, xs uint32, ys uint32, xi uint32, yi uint32, w uint32, h uint32) {
	ccanvas, _ := (*C.struct_video_canvas_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&canvas)).Data)), cgoAllocsUnknown
	cxs, _ := (C.uint)(xs), cgoAllocsUnknown
	cys, _ := (C.uint)(ys), cgoAllocsUnknown
	cxi, _ := (C.uint)(xi), cgoAllocsUnknown
	cyi, _ := (C.uint)(yi), cgoAllocsUnknown
	cw, _ := (C.uint)(w), cgoAllocsUnknown
	ch, _ := (C.uint)(h), cgoAllocsUnknown
	C.video_canvas_refresh(ccanvas, cxs, cys, cxi, cyi, cw, ch)
}

// VideoCanvasSetPalette function as declared in vice\video.h:231
func VideoCanvasSetPalette(canvas []VideoCanvasS, palette []PaletteS) int32 {
	ccanvas, _ := (*C.struct_video_canvas_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&canvas)).Data)), cgoAllocsUnknown
	cpalette, _ := (*C.struct_palette_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&palette)).Data)), cgoAllocsUnknown
	__ret := C.video_canvas_set_palette(ccanvas, cpalette)
	__v := (int32)(__ret)
	return __v
}

// VideoCanvasPaletteSet function as declared in vice\video.h:234
func VideoCanvasPaletteSet(canvas []VideoCanvasS, palette []PaletteS) int32 {
	ccanvas, _ := (*C.struct_video_canvas_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&canvas)).Data)), cgoAllocsUnknown
	cpalette, _ := (*C.struct_palette_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&palette)).Data)), cgoAllocsUnknown
	__ret := C.video_canvas_palette_set(ccanvas, cpalette)
	__v := (int32)(__ret)
	return __v
}

// VideoCanvasCreateSet function as declared in vice\video.h:236
func VideoCanvasCreateSet(canvas []VideoCanvasS) {
	ccanvas, _ := (*C.struct_video_canvas_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&canvas)).Data)), cgoAllocsUnknown
	C.video_canvas_create_set(ccanvas)
}

// VideoCanvasDestroy function as declared in vice\video.h:237
func VideoCanvasDestroy(canvas []VideoCanvasS) {
	ccanvas, _ := (*C.struct_video_canvas_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&canvas)).Data)), cgoAllocsUnknown
	C.video_canvas_destroy(ccanvas)
}

// VideoCanvasMap function as declared in vice\video.h:238
func VideoCanvasMap(canvas []VideoCanvasS) {
	ccanvas, _ := (*C.struct_video_canvas_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&canvas)).Data)), cgoAllocsUnknown
	C.video_canvas_map(ccanvas)
}

// VideoCanvasUnmap function as declared in vice\video.h:239
func VideoCanvasUnmap(canvas []VideoCanvasS) {
	ccanvas, _ := (*C.struct_video_canvas_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&canvas)).Data)), cgoAllocsUnknown
	C.video_canvas_unmap(ccanvas)
}

// VideoCanvasResize function as declared in vice\video.h:240
func VideoCanvasResize(canvas []VideoCanvasS, resizeCanvas byte) {
	ccanvas, _ := (*C.struct_video_canvas_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&canvas)).Data)), cgoAllocsUnknown
	cresizeCanvas, _ := (C.char)(resizeCanvas), cgoAllocsUnknown
	C.video_canvas_resize(ccanvas, cresizeCanvas)
}

// VideoCanvasRender function as declared in vice\video.h:241
func VideoCanvasRender(canvas []VideoCanvasS, trg []byte, width int32, height int32, xs int32, ys int32, xt int32, yt int32, pitcht int32, depth int32) {
	ccanvas, _ := (*C.struct_video_canvas_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&canvas)).Data)), cgoAllocsUnknown
	ctrg, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&trg)).Data)), cgoAllocsUnknown
	cwidth, _ := (C.int)(width), cgoAllocsUnknown
	cheight, _ := (C.int)(height), cgoAllocsUnknown
	cxs, _ := (C.int)(xs), cgoAllocsUnknown
	cys, _ := (C.int)(ys), cgoAllocsUnknown
	cxt, _ := (C.int)(xt), cgoAllocsUnknown
	cyt, _ := (C.int)(yt), cgoAllocsUnknown
	cpitcht, _ := (C.int)(pitcht), cgoAllocsUnknown
	cdepth, _ := (C.int)(depth), cgoAllocsUnknown
	C.video_canvas_render(ccanvas, ctrg, cwidth, cheight, cxs, cys, cxt, cyt, cpitcht, cdepth)
}

// VideoCanvasRefreshAll function as declared in vice\video.h:244
func VideoCanvasRefreshAll(canvas []VideoCanvasS) {
	ccanvas, _ := (*C.struct_video_canvas_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&canvas)).Data)), cgoAllocsUnknown
	C.video_canvas_refresh_all(ccanvas)
}

// VideoCanvasCanResize function as declared in vice\video.h:245
func VideoCanvasCanResize(canvas []VideoCanvasS) byte {
	ccanvas, _ := (*C.struct_video_canvas_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&canvas)).Data)), cgoAllocsUnknown
	__ret := C.video_canvas_can_resize(ccanvas)
	__v := (byte)(__ret)
	return __v
}

// VideoViewportGet function as declared in vice\video.h:246
func VideoViewportGet(canvas []VideoCanvasS, viewport [][]ViewportS, geometry [][]GeometryS) {
	ccanvas, _ := (*C.struct_video_canvas_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&canvas)).Data)), cgoAllocsUnknown
	cviewport, _ := unpackArgSSViewportS(viewport)
	cgeometry, _ := unpackArgSSGeometryS(geometry)
	C.video_viewport_get(ccanvas, cviewport, cgeometry)
	packSSGeometryS(geometry, cgeometry)
	packSSViewportS(viewport, cviewport)
}

// VideoViewportResize function as declared in vice\video.h:249
func VideoViewportResize(canvas []VideoCanvasS, resizeCanvas byte) {
	ccanvas, _ := (*C.struct_video_canvas_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&canvas)).Data)), cgoAllocsUnknown
	cresizeCanvas, _ := (C.char)(resizeCanvas), cgoAllocsUnknown
	C.video_viewport_resize(ccanvas, cresizeCanvas)
}

// VideoViewportTitleSet function as declared in vice\video.h:250
func VideoViewportTitleSet(canvas []VideoCanvasS, title string) {
	ccanvas, _ := (*C.struct_video_canvas_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&canvas)).Data)), cgoAllocsUnknown
	ctitle, _ := unpackPCharString(title)
	C.video_viewport_title_set(ccanvas, ctitle)
}

// VideoViewportTitleFree function as declared in vice\video.h:252
func VideoViewportTitleFree(viewport []ViewportS) {
	cviewport, _ := (*C.struct_viewport_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&viewport)).Data)), cgoAllocsUnknown
	C.video_viewport_title_free(cviewport)
}

// VideoResourcesInit function as declared in vice\video.h:266
func VideoResourcesInit() int32 {
	__ret := C.video_resources_init()
	__v := (int32)(__ret)
	return __v
}

// VideoResourcesShutdown function as declared in vice\video.h:267
func VideoResourcesShutdown() {
	C.video_resources_shutdown()
}

// VideoResourcesChipInit function as declared in vice\video.h:268
func VideoResourcesChipInit(chipname string, canvas [][]VideoCanvasS, videoChipCap []VideoChipCap) int32 {
	cchipname, _ := unpackPCharString(chipname)
	ccanvas, _ := unpackArgSSVideoCanvasS(canvas)
	cvideoChipCap, _ := unpackArgSVideoChipCap(videoChipCap)
	__ret := C.video_resources_chip_init(cchipname, ccanvas, cvideoChipCap)
	packSVideoChipCap(videoChipCap, cvideoChipCap)
	packSSVideoCanvasS(canvas, ccanvas)
	__v := (int32)(__ret)
	return __v
}

// VideoResourcesChipShutdown function as declared in vice\video.h:271
func VideoResourcesChipShutdown(canvas []VideoCanvasS) {
	ccanvas, _ := (*C.struct_video_canvas_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&canvas)).Data)), cgoAllocsUnknown
	C.video_resources_chip_shutdown(ccanvas)
}

// VideoCmdlineOptionsChipInit function as declared in vice\video.h:272
func VideoCmdlineOptionsChipInit(chipname string, videoChipCap []VideoChipCap) int32 {
	cchipname, _ := unpackPCharString(chipname)
	cvideoChipCap, _ := unpackArgSVideoChipCap(videoChipCap)
	__ret := C.video_cmdline_options_chip_init(cchipname, cvideoChipCap)
	packSVideoChipCap(videoChipCap, cvideoChipCap)
	__v := (int32)(__ret)
	return __v
}

// VideoArchResourcesInit function as declared in vice\video.h:274
func VideoArchResourcesInit() int32 {
	__ret := C.video_arch_resources_init()
	__v := (int32)(__ret)
	return __v
}

// VideoArchResourcesShutdown function as declared in vice\video.h:275
func VideoArchResourcesShutdown() {
	C.video_arch_resources_shutdown()
}

// VideoColorPaletteInternal function as declared in vice\video.h:301
func VideoColorPaletteInternal(canvas []VideoCanvasS, cbmPalette []VideoCbmPaletteS) {
	ccanvas, _ := (*C.struct_video_canvas_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&canvas)).Data)), cgoAllocsUnknown
	ccbmPalette, _ := unpackArgSVideoCbmPaletteS(cbmPalette)
	C.video_color_palette_internal(ccanvas, ccbmPalette)
	packSVideoCbmPaletteS(cbmPalette, ccbmPalette)
}

// VideoColorUpdatePalette function as declared in vice\video.h:303
func VideoColorUpdatePalette(canvas []VideoCanvasS) int32 {
	ccanvas, _ := (*C.struct_video_canvas_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&canvas)).Data)), cgoAllocsUnknown
	__ret := C.video_color_update_palette(ccanvas)
	__v := (int32)(__ret)
	return __v
}

// VideoColorPaletteFree function as declared in vice\video.h:304
func VideoColorPaletteFree(palette []PaletteS) {
	cpalette, _ := (*C.struct_palette_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&palette)).Data)), cgoAllocsUnknown
	C.video_color_palette_free(cpalette)
}

// VideoRender1x2Init function as declared in vice\video.h:307
func VideoRender1x2Init() {
	C.video_render_1x2_init()
}

// VideoRender2x2Init function as declared in vice\video.h:308
func VideoRender2x2Init() {
	C.video_render_2x2_init()
}

// VideoRenderPalInit function as declared in vice\video.h:309
func VideoRenderPalInit() {
	C.video_render_pal_init()
}

// VideoRenderCrtInit function as declared in vice\video.h:310
func VideoRenderCrtInit() {
	C.video_render_crt_init()
}

// InitResources function as declared in vice\init.h:30
func InitResources() int32 {
	__ret := C.init_resources()
	__v := (int32)(__ret)
	return __v
}

// InitCmdlineOptions function as declared in vice\init.h:31
func InitCmdlineOptions() int32 {
	__ret := C.init_cmdline_options()
	__v := (int32)(__ret)
	return __v
}

// InitMain function as declared in vice\init.h:32
func InitMain() int32 {
	__ret := C.init_main()
	__v := (int32)(__ret)
	return __v
}

// InitResourceFail function as declared in vice\init.h:34
func InitResourceFail(module string) {
	cmodule, _ := unpackPCharString(module)
	C.init_resource_fail(cmodule)
}

// InitCmdlineOptionsFail function as declared in vice\init.h:35
func InitCmdlineOptionsFail(module string) {
	cmodule, _ := unpackPCharString(module)
	C.init_cmdline_options_fail(cmodule)
}

// DiskImageInit function as declared in vice\diskimage.h:102
func DiskImageInit() {
	C.disk_image_init()
}

// DiskImageResourcesInit function as declared in vice\diskimage.h:103
func DiskImageResourcesInit() int32 {
	__ret := C.disk_image_resources_init()
	__v := (int32)(__ret)
	return __v
}

// DiskImageCmdlineOptionsInit function as declared in vice\diskimage.h:104
func DiskImageCmdlineOptionsInit() int32 {
	__ret := C.disk_image_cmdline_options_init()
	__v := (int32)(__ret)
	return __v
}

// DiskImageResourcesShutdown function as declared in vice\diskimage.h:105
func DiskImageResourcesShutdown() {
	C.disk_image_resources_shutdown()
}

// DiskImageFsimageNameSet function as declared in vice\diskimage.h:107
func DiskImageFsimageNameSet(image []DiskImage, name string) {
	cimage, _ := unpackArgSDiskImage(image)
	cname, _ := unpackPCharString(name)
	C.disk_image_fsimage_name_set(cimage, cname)
	packSDiskImage(image, cimage)
}

// DiskImageFsimageNameGet function as declared in vice\diskimage.h:108
func DiskImageFsimageNameGet(image []DiskImage) string {
	cimage, _ := unpackArgSDiskImage(image)
	__ret := C.disk_image_fsimage_name_get(cimage)
	packSDiskImage(image, cimage)
	__v := packPCharString(__ret)
	return __v
}

// DiskImageFsimageFdGet function as declared in vice\diskimage.h:109
func DiskImageFsimageFdGet(image []DiskImage) unsafe.Pointer {
	cimage, _ := unpackArgSDiskImage(image)
	__ret := C.disk_image_fsimage_fd_get(cimage)
	packSDiskImage(image, cimage)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// DiskImageFsimageCreate function as declared in vice\diskimage.h:110
func DiskImageFsimageCreate(name string, kind uint32) int32 {
	cname, _ := unpackPCharString(name)
	ckind, _ := (C.uint)(kind), cgoAllocsUnknown
	__ret := C.disk_image_fsimage_create(cname, ckind)
	__v := (int32)(__ret)
	return __v
}

// DiskImageRawimageNameSet function as declared in vice\diskimage.h:112
func DiskImageRawimageNameSet(image []DiskImage, name string) {
	cimage, _ := unpackArgSDiskImage(image)
	cname, _ := unpackPCharString(name)
	C.disk_image_rawimage_name_set(cimage, cname)
	packSDiskImage(image, cimage)
}

// DiskImageRawimageDriverNameSet function as declared in vice\diskimage.h:113
func DiskImageRawimageDriverNameSet(image []DiskImage) {
	cimage, _ := unpackArgSDiskImage(image)
	C.disk_image_rawimage_driver_name_set(cimage)
	packSDiskImage(image, cimage)
}

// DiskImageNameSet function as declared in vice\diskimage.h:115
func DiskImageNameSet(image []DiskImage, name string) {
	cimage, _ := unpackArgSDiskImage(image)
	cname, _ := unpackPCharString(name)
	C.disk_image_name_set(cimage, cname)
	packSDiskImage(image, cimage)
}

// DiskImageNameGet function as declared in vice\diskimage.h:116
func DiskImageNameGet(image []DiskImage) string {
	cimage, _ := unpackArgSDiskImage(image)
	__ret := C.disk_image_name_get(cimage)
	packSDiskImage(image, cimage)
	__v := packPCharString(__ret)
	return __v
}

// DiskImageCreate function as declared in vice\diskimage.h:118
func DiskImageCreate() *DiskImage {
	__ret := C.disk_image_create()
	__v := NewDiskImageRef(unsafe.Pointer(__ret))
	return __v
}

// DiskImageDestroy function as declared in vice\diskimage.h:119
func DiskImageDestroy(image []DiskImage) {
	cimage, _ := unpackArgSDiskImage(image)
	C.disk_image_destroy(cimage)
	packSDiskImage(image, cimage)
}

// DiskImageMediaCreate function as declared in vice\diskimage.h:121
func DiskImageMediaCreate(image []DiskImage) {
	cimage, _ := unpackArgSDiskImage(image)
	C.disk_image_media_create(cimage)
	packSDiskImage(image, cimage)
}

// DiskImageMediaDestroy function as declared in vice\diskimage.h:122
func DiskImageMediaDestroy(image []DiskImage) {
	cimage, _ := unpackArgSDiskImage(image)
	C.disk_image_media_destroy(cimage)
	packSDiskImage(image, cimage)
}

// DiskImageOpen function as declared in vice\diskimage.h:124
func DiskImageOpen(image []DiskImage) int32 {
	cimage, _ := unpackArgSDiskImage(image)
	__ret := C.disk_image_open(cimage)
	packSDiskImage(image, cimage)
	__v := (int32)(__ret)
	return __v
}

// DiskImageClose function as declared in vice\diskimage.h:125
func DiskImageClose(image []DiskImage) int32 {
	cimage, _ := unpackArgSDiskImage(image)
	__ret := C.disk_image_close(cimage)
	packSDiskImage(image, cimage)
	__v := (int32)(__ret)
	return __v
}

// DiskImageReadSector function as declared in vice\diskimage.h:127
func DiskImageReadSector(image []DiskImage, buf []byte, dadr []DiskAddr) int32 {
	cimage, _ := unpackArgSDiskImage(image)
	cbuf, _ := (*C.uchar)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&buf)).Data)), cgoAllocsUnknown
	cdadr, _ := unpackArgSDiskAddr(dadr)
	__ret := C.disk_image_read_sector(cimage, cbuf, cdadr)
	packSDiskAddr(dadr, cdadr)
	packSDiskImage(image, cimage)
	__v := (int32)(__ret)
	return __v
}

// DiskImageWriteSector function as declared in vice\diskimage.h:129
func DiskImageWriteSector(image []DiskImage, buf string, dadr []DiskAddr) int32 {
	cimage, _ := unpackArgSDiskImage(image)
	cbuf, _ := unpackPUcharString(buf)
	cdadr, _ := unpackArgSDiskAddr(dadr)
	__ret := C.disk_image_write_sector(cimage, cbuf, cdadr)
	packSDiskAddr(dadr, cdadr)
	packSDiskImage(image, cimage)
	__v := (int32)(__ret)
	return __v
}

// DiskImageCheckSector function as declared in vice\diskimage.h:131
func DiskImageCheckSector(image []DiskImage, track uint32, sector uint32) int32 {
	cimage, _ := unpackArgSDiskImage(image)
	ctrack, _ := (C.uint)(track), cgoAllocsUnknown
	csector, _ := (C.uint)(sector), cgoAllocsUnknown
	__ret := C.disk_image_check_sector(cimage, ctrack, csector)
	packSDiskImage(image, cimage)
	__v := (int32)(__ret)
	return __v
}

// DiskImageSectorPerTrack function as declared in vice\diskimage.h:133
func DiskImageSectorPerTrack(format uint32, track uint32) uint32 {
	cformat, _ := (C.uint)(format), cgoAllocsUnknown
	ctrack, _ := (C.uint)(track), cgoAllocsUnknown
	__ret := C.disk_image_sector_per_track(cformat, ctrack)
	__v := (uint32)(__ret)
	return __v
}

// DiskImageRawTrackSize function as declared in vice\diskimage.h:135
func DiskImageRawTrackSize(format uint32, track uint32) uint32 {
	cformat, _ := (C.uint)(format), cgoAllocsUnknown
	ctrack, _ := (C.uint)(track), cgoAllocsUnknown
	__ret := C.disk_image_raw_track_size(cformat, ctrack)
	__v := (uint32)(__ret)
	return __v
}

// DiskImageGapSize function as declared in vice\diskimage.h:137
func DiskImageGapSize(format uint32, track uint32) uint32 {
	cformat, _ := (C.uint)(format), cgoAllocsUnknown
	ctrack, _ := (C.uint)(track), cgoAllocsUnknown
	__ret := C.disk_image_gap_size(cformat, ctrack)
	__v := (uint32)(__ret)
	return __v
}

// DiskImageReadImage function as declared in vice\diskimage.h:138
func DiskImageReadImage(image []DiskImage) int32 {
	cimage, _ := unpackArgSDiskImage(image)
	__ret := C.disk_image_read_image(cimage)
	packSDiskImage(image, cimage)
	__v := (int32)(__ret)
	return __v
}

// DiskImageWriteP64Image function as declared in vice\diskimage.h:139
func DiskImageWriteP64Image(image []DiskImage) int32 {
	cimage, _ := unpackArgSDiskImage(image)
	__ret := C.disk_image_write_p64_image(cimage)
	packSDiskImage(image, cimage)
	__v := (int32)(__ret)
	return __v
}

// DiskImageWriteHalfTrack function as declared in vice\diskimage.h:140
func DiskImageWriteHalfTrack(image []DiskImage, halfTrack uint32, raw []DiskTrackS) int32 {
	cimage, _ := unpackArgSDiskImage(image)
	chalfTrack, _ := (C.uint)(halfTrack), cgoAllocsUnknown
	craw, _ := (*C.struct_disk_track_s)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&raw)).Data)), cgoAllocsUnknown
	__ret := C.disk_image_write_half_track(cimage, chalfTrack, craw)
	packSDiskImage(image, cimage)
	__v := (int32)(__ret)
	return __v
}

// DiskImageSpeedMap function as declared in vice\diskimage.h:143
func DiskImageSpeedMap(format uint32, track uint32) uint32 {
	cformat, _ := (C.uint)(format), cgoAllocsUnknown
	ctrack, _ := (C.uint)(track), cgoAllocsUnknown
	__ret := C.disk_image_speed_map(cformat, ctrack)
	__v := (uint32)(__ret)
	return __v
}

// DiskImageAttachLog function as declared in vice\diskimage.h:145
func DiskImageAttachLog(image []DiskImage, lognum int32, unit uint32) {
	cimage, _ := unpackArgSDiskImage(image)
	clognum, _ := (C.int)(lognum), cgoAllocsUnknown
	cunit, _ := (C.uint)(unit), cgoAllocsUnknown
	C.disk_image_attach_log(cimage, clognum, cunit)
	packSDiskImage(image, cimage)
}

// DiskImageDetachLog function as declared in vice\diskimage.h:147
func DiskImageDetachLog(image []DiskImage, lognum int32, unit uint32) {
	cimage, _ := unpackArgSDiskImage(image)
	clognum, _ := (C.int)(lognum), cgoAllocsUnknown
	cunit, _ := (C.uint)(unit), cgoAllocsUnknown
	C.disk_image_detach_log(cimage, clognum, cunit)
	packSDiskImage(image, cimage)
}

// MonBreakpointInit function as declared in monitor\mon_breakpoint.h:38
func MonBreakpointInit() {
	C.mon_breakpoint_init()
}

// MonBreakpointSwitchCheckpoint function as declared in monitor\mon_breakpoint.h:40
func MonBreakpointSwitchCheckpoint(op int32, breakptNum int32) {
	cop, _ := (C.int)(op), cgoAllocsUnknown
	cbreakptNum, _ := (C.int)(breakptNum), cgoAllocsUnknown
	C.mon_breakpoint_switch_checkpoint(cop, cbreakptNum)
}

// MonBreakpointSetIgnoreCount function as declared in monitor\mon_breakpoint.h:41
func MonBreakpointSetIgnoreCount(breakptNum int32, count int32) {
	cbreakptNum, _ := (C.int)(breakptNum), cgoAllocsUnknown
	ccount, _ := (C.int)(count), cgoAllocsUnknown
	C.mon_breakpoint_set_ignore_count(cbreakptNum, ccount)
}

// MonBreakpointPrintCheckpoints function as declared in monitor\mon_breakpoint.h:42
func MonBreakpointPrintCheckpoints() {
	C.mon_breakpoint_print_checkpoints()
}

// MonBreakpointDeleteCheckpoint function as declared in monitor\mon_breakpoint.h:43
func MonBreakpointDeleteCheckpoint(brknum int32) {
	cbrknum, _ := (C.int)(brknum), cgoAllocsUnknown
	C.mon_breakpoint_delete_checkpoint(cbrknum)
}

// MonBreakpointSetCheckpointCondition function as declared in monitor\mon_breakpoint.h:44
func MonBreakpointSetCheckpointCondition(brkNum int32, cnode []CondNodeS) {
	cbrkNum, _ := (C.int)(brkNum), cgoAllocsUnknown
	ccnode, _ := unpackArgSCondNodeS(cnode)
	C.mon_breakpoint_set_checkpoint_condition(cbrkNum, ccnode)
	packSCondNodeS(cnode, ccnode)
}

// MonBreakpointSetCheckpointCommand function as declared in monitor\mon_breakpoint.h:45
func MonBreakpointSetCheckpointCommand(brkNum int32, cmd []byte) {
	cbrkNum, _ := (C.int)(brkNum), cgoAllocsUnknown
	ccmd, _ := (*C.char)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&cmd)).Data)), cgoAllocsUnknown
	C.mon_breakpoint_set_checkpoint_command(cbrkNum, ccmd)
}

// MonBreakpointCheckCheckpoint function as declared in monitor\mon_breakpoint.h:46
func MonBreakpointCheckCheckpoint(mem Memspace, addr uint32, lastpc uint32, op MemoryOp) int32 {
	cmem, _ := (C.MEMSPACE)(mem), cgoAllocsUnknown
	caddr, _ := (C.uint)(addr), cgoAllocsUnknown
	clastpc, _ := (C.uint)(lastpc), cgoAllocsUnknown
	cop, _ := (C.MEMORY_OP)(op), cgoAllocsUnknown
	__ret := C.mon_breakpoint_check_checkpoint(cmem, caddr, clastpc, cop)
	__v := (int32)(__ret)
	return __v
}

// MonBreakpointAddCheckpoint function as declared in monitor\mon_breakpoint.h:48
func MonBreakpointAddCheckpoint(startAddr uint32, endAddr uint32, stop int32, op MemoryOp, isTemp int32) int32 {
	cstartAddr, _ := (C.MON_ADDR)(startAddr), cgoAllocsUnknown
	cendAddr, _ := (C.MON_ADDR)(endAddr), cgoAllocsUnknown
	cstop, _ := (C.bool)(stop), cgoAllocsUnknown
	cop, _ := (C.MEMORY_OP)(op), cgoAllocsUnknown
	cisTemp, _ := (C.bool)(isTemp), cgoAllocsUnknown
	__ret := C.mon_breakpoint_add_checkpoint(cstartAddr, cendAddr, cstop, cop, cisTemp)
	__v := (int32)(__ret)
	return __v
}

// MonBreakpointIs function as declared in monitor\mon_breakpoint.h:51
func MonBreakpointIs(address uint32) MonBreakpointType {
	caddress, _ := (C.MON_ADDR)(address), cgoAllocsUnknown
	__ret := C.mon_breakpoint_is(caddress)
	__v := (MonBreakpointType)(__ret)
	return __v
}

// MonBreakpointSet function as declared in monitor\mon_breakpoint.h:52
func MonBreakpointSet(address uint32) {
	caddress, _ := (C.MON_ADDR)(address), cgoAllocsUnknown
	C.mon_breakpoint_set(caddress)
}

// MonBreakpointUnset function as declared in monitor\mon_breakpoint.h:53
func MonBreakpointUnset(address uint32) {
	caddress, _ := (C.MON_ADDR)(address), cgoAllocsUnknown
	C.mon_breakpoint_unset(caddress)
}

// MonBreakpointEnable function as declared in monitor\mon_breakpoint.h:54
func MonBreakpointEnable(address uint32) {
	caddress, _ := (C.MON_ADDR)(address), cgoAllocsUnknown
	C.mon_breakpoint_enable(caddress)
}

// MonBreakpointDisable function as declared in monitor\mon_breakpoint.h:55
func MonBreakpointDisable(address uint32) {
	caddress, _ := (C.MON_ADDR)(address), cgoAllocsUnknown
	C.mon_breakpoint_disable(caddress)
}

var MonitorCpuForMemspace [6]*MonitorCpuTypeS

// MonitorChangeDevice function as declared in monitor\montypes.h:298
func MonitorChangeDevice(mem Memspace) {
	cmem, _ := (C.MEMSPACE)(mem), cgoAllocsUnknown
	C.monitor_change_device(cmem)
}

// C64MemInitResources function as declared in c64\c64mem.h:60
func C64MemInitResources() int32 {
	__ret := C.c64_mem_init_resources()
	__v := (int32)(__ret)
	return __v
}

// C64MemInitCmdlineOptions function as declared in c64\c64mem.h:61
func C64MemInitCmdlineOptions() int32 {
	__ret := C.c64_mem_init_cmdline_options()
	__v := (int32)(__ret)
	return __v
}

// MemSetVbank function as declared in c64\c64mem.h:63
func MemSetVbank(newVbank int32) {
	cnewVbank, _ := (C.int)(newVbank), cgoAllocsUnknown
	C.mem_set_vbank(cnewVbank)
}

// RamRead function as declared in c64\c64mem.h:65
func RamRead(addr uint16) byte {
	caddr, _ := (C.WORD)(addr), cgoAllocsUnknown
	__ret := C.ram_read(caddr)
	__v := (byte)(__ret)
	return __v
}

// RamStore function as declared in c64\c64mem.h:66
func RamStore(addr uint16, value byte) {
	caddr, _ := (C.WORD)(addr), cgoAllocsUnknown
	cvalue, _ := (C.uchar)(value), cgoAllocsUnknown
	C.ram_store(caddr, cvalue)
}

// RamHiStore function as declared in c64\c64mem.h:67
func RamHiStore(addr uint16, value byte) {
	caddr, _ := (C.WORD)(addr), cgoAllocsUnknown
	cvalue, _ := (C.uchar)(value), cgoAllocsUnknown
	C.ram_hi_store(caddr, cvalue)
}

// MemPlaConfigChanged function as declared in c64\c64mem.h:75
func MemPlaConfigChanged() {
	C.mem_pla_config_changed()
}

// MemSetTapeSense function as declared in c64\c64mem.h:76
func MemSetTapeSense(sense int32) {
	csense, _ := (C.int)(sense), cgoAllocsUnknown
	C.mem_set_tape_sense(csense)
}

// MemSetTapeWriteIn function as declared in c64\c64mem.h:77
func MemSetTapeWriteIn(val int32) {
	cval, _ := (C.int)(val), cgoAllocsUnknown
	C.mem_set_tape_write_in(cval)
}

// MemSetTapeMotorIn function as declared in c64\c64mem.h:78
func MemSetTapeMotorIn(val int32) {
	cval, _ := (C.int)(val), cgoAllocsUnknown
	C.mem_set_tape_motor_in(cval)
}

// MemSetWriteHook function as declared in c64\c64mem.h:82
func MemSetWriteHook(config int32, page int32, f StoreFunc) {
	cconfig, _ := (C.int)(config), cgoAllocsUnknown
	cpage, _ := (C.int)(page), cgoAllocsUnknown
	cf, _ := f.PassRef()
	C.mem_set_write_hook(cconfig, cpage, cf)
}

// C64MemInit function as declared in c64\c64mem.h:93
func C64MemInit() {
	C.c64_mem_init()
}

// C64MemUiInitEarly function as declared in c64\c64mem.h:95
func C64MemUiInitEarly() int32 {
	__ret := C.c64_mem_ui_init_early()
	__v := (int32)(__ret)
	return __v
}

// C64MemUiInit function as declared in c64\c64mem.h:96
func C64MemUiInit() int32 {
	__ret := C.c64_mem_ui_init()
	__v := (int32)(__ret)
	return __v
}

// C64MemUiShutdown function as declared in c64\c64mem.h:97
func C64MemUiShutdown() {
	C.c64_mem_ui_shutdown()
}
